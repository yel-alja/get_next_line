// char *read_and_update(int fd, char *buffer)
// {
//     char *buff;
//     ssize_t bytes_read;
//     char *tmp;
//     buff = malloc(BUFFER_SIZE + 1);
//     if(!buff)
//         return (NULL);
//     while (!ft_strchr(buffer, '\n'))
//     {
//         bytes_read = read(fd, buff, BUFFER_SIZE);
//         if (bytes_read <= 0)
//             break;
//         buff[bytes_read] = '\0';
//         tmp = ft_strjoin(buffer, buff);
//         free(buffer);
//         buffer = tmp;
//     }
//     return (buffer);
// }



// char *get_next_line(int fd) {
//     static char *buffer = NULL;
//     char *line;
//     char *tmp;

//     if (fd < 0 || BUFFER_SIZE <= 0)
//         return NULL;
//     if (!buffer)
//         buffer = ft_strdup("");
//     buffer = read_and_update(fd, buffer);
//     if (!buffer || !*buffer)
//     {
//         free(buffer);
//         buffer = NULL;
//         return NULL;
//     }
//     line = find_line(buffer);
//     tmp = ft_strdup(ft_strchr(buffer, '\n'));
//     free(buffer);
//     buffer = tmp;
//     return (line);
// }








char *get_next_line(int fd)
{
    static char *buffer;
    char buff[BUFFER_SIZE + 1];
    char *line;
    char *tmp;
    ssize_t bytes_read;
    
    if (fd < 0 || BUFFER_SIZE <= 0)
        return (NULL);

    // buffer  = rea_fun(fd,buffer);
    bytes_read = 1;
    while (bytes_read > 0)
    {
        bytes_read = read(fd, buff, BUFFER_SIZE);
        buffer = ft_strjoin(buffer, buff);
        if (ft_strchr(buffer, '\n') && bytes_read)
            break;
    }
    if (bytes_read < 0)
        return NULL;
    line = find_line(buffer);
    tmp = ft_strdup(ft_strchr(buffer, '\n')); 
    free(buffer);
    buffer = ft_strdup(tmp);
    return (free(tmp),line);
}